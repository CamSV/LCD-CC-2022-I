#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void)
{
  pid_t pid;
  int status, died;

  switch(pid = fork()) {

    case -1: printf(" No es posible hacer el fork...\n");
             exit(-1);

    // codigo que ejecuta el hijo
    case 0: printf("\tC贸digo del hijo...\n" );
            //sleep(10);
            int i=1;
            while (i<=10){
              printf("\t\t Tarea del proceso hijo: %d (%d)\n", i++, getpid());
              sleep (1);
            }
            break;
            // exit(1);

    // codigo que ejecuta el padre
    default: printf("C贸digo que ejecuta el padre\n %d", getpid() );
             died = wait(&status);
             printf("Termin贸 el proceso hijo: %d \n", died);
    }

    return(0);
}
*/-------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

# define NUM_PROCESOS 5
int I = 0;

void codigo_del_proceso (int id)
{
   int i;

   for (i = 0; i < 50; i++)
        printf("Proceso %d: i = %d, I = %d\n", id, i, I++ );
   exit (id);

}

int main(void)
{
    int p;
    int id[NUM_PROCESOS] = {1, 2, 3, 4, 5};
    int pid;
    int salida;

    for (p = 0; p < NUM_PROCESOS; p++) {
      pid = fork();
      if  (pid == -1){
          perror("Error al crear un proceso: ");
          exit(-1);
      }
      else if (pid == 0) /* codigo proceso hijo */
          codigo_del_proceso (id[p]);
    }

    // codigo proceso padre
    for (p = 0; p < NUM_PROCESOS; p++) {
        pid = wait(&salida);
        printf("Proceso %d con id = %x terminado\n", pid, salida >> 8);
    }

    return(0);
}
/*------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void)
{
   int i;
   int a,b;
   pid_t pidh1,pidh2,pidx;
   int prod,mayor;
   int res;

   printf("\nDame dos enteros: \n");
   scanf("%d%d", &a, &b);
   pidh1 = fork();

// c贸digo del padre
   if(pidh1)
   {
      pidh2 = fork();
      if(pidh2)
      {
        for(i = 0; i < 2; i++)
        {
           pidx = wait(&res);
           printf("res1: %d\n", res);
        if (pidx == pidh1) {
             prod = res >> 8;
             printf("res >>:%d\n", res >> 8);
             printf("entro");
        }
           else
             mayor = res >> 8;
        }
        printf("\n El producto de %d y %d es %d", a,b,prod);
        printf("\n El mayor de %d y %d es %d \n", a,b,mayor);
      }

      else
      {
         if(a > b)
           exit(a);
         else
           exit(b);
      }
   }
// hijo 1
   else
      {
     prod = a * b;
    printf("prod: %d\n", prod);
     exit(prod);
      }

  return(0);

 }
